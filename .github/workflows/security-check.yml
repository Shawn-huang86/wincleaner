name: Security Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # ÊØèÂ§©ÂáåÊô®2ÁÇπËøêË°åÔºàUTCÊó∂Èó¥Ôºâ
    - cron: '0 2 * * *'
  workflow_dispatch:
    # ÂÖÅËÆ∏ÊâãÂä®Ëß¶Âèë

jobs:
  security-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security check
      run: npm run security-check:ci
      
    - name: Generate security report
      if: always()
      run: |
        echo "## Security Check Report" >> $GITHUB_STEP_SUMMARY
        echo "### Ê£ÄÊü•Êó∂Èó¥: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "### Ê£ÄÊü•ÁªìÊûú: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        
    - name: Create issue if security issues found
      if: failure() && github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          const title = 'üö® Security Check Failed - ' + new Date().toISOString().split('T')[0];
          const body = `
          ## Security Check Failed
          
          The automated security check has detected potential security issues in the codebase.
          
          ### Details
          - **Repository**: ${{ github.repository }}
          - **Branch**: ${{ github.ref }}
          - **Commit**: ${{ github.sha }}
          - **Check Time**: ${new Date().toISOString()}
          
          ### Next Steps
          1. Review the security check output above
          2. Identify and fix any hardcoded sensitive information
          3. Use environment variables for sensitive data
          4. Update the .gitignore file if needed
          5. Test the fixes locally with: \`npm run security-check\`
          
          ### Resources
          - [Security Best Practices](https://docs.github.com/en/code-security/secret-scanning/about-secret-scanning)
          - [Environment Variables Guide](https://create-react-app.dev/docs/adding-custom-environment-variables/)
          
          ---
          This issue was automatically created by the GitHub Actions security check workflow.
          `;
          
          // Check if similar issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'security'
          });
          
          const today = new Date().toISOString().split('T')[0];
          const existingIssue = issues.data.find(issue => 
            issue.title.includes(today) && issue.title.includes('Security Check Failed')
          );
          
          if (!existingIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'automated']
            });
          }
          
    - name: Comment on PR if security issues found
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `
          ## üîç Security Check Results
          
          The security check has detected potential issues in this pull request.
          
          ### ‚ö†Ô∏è Issues Found
          Please review the security check output above and address any hardcoded sensitive information.
          
          ### üìù Recommended Actions
          1. Move hardcoded API keys, passwords, or tokens to environment variables
          2. Use the provided .env.example and .env.test files for configuration
          3. Ensure sensitive files are properly ignored in .gitignore
          4. Test locally with: \`npm run security-check\`
          
          ### üîß Testing Commands
          \`\`\`bash
          # Run security check
          npm run security-check
          
          # Check environment variables
          cp .env.example .env
          # Edit .env with your values
          \`\`\`
          
          ---
          ü§ñ This comment was automatically generated by the security check workflow.
          `;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });